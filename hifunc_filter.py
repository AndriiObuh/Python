# üîπ 3. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–∞—Ä–Ω–∏—Ö —á–∏—Å–µ–ª
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø—Ä–∏–π–º–∞—î —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç—ñ–ª—å–∫–∏ –ø–∞—Ä–Ω—ñ —á–∏—Å–ª–∞.

# ‚úÖ –í–∞—Ä—ñ–∞–Ω—Ç 1: –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ü–∏–∫–ª—É for

def filter_even(numbers):
    even = []
    for i in numbers:
        if i % 2 == 0:
            even.append(i)
    return even

print(filter_even([1, 2, 3, 4, 5, 6]))  # [2, 4, 6]
print(filter_even([10, 15, 20, 25]))  # [10, 20]

# ‚úÖ –í–∞—Ä—ñ–∞–Ω—Ç 2: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è list comprehension (—Å–ø–∏—Å–∫–æ–≤–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–Ω—è)

def filter_even_numbers(lst):
    return [num for num in lst if num % 2 == 0]

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
print(filter_even_numbers([1, 2, 3, 4, 5, 6]))  # [2, 4, 6]
# –¶–µ–π –≤–∞—Ä—ñ–∞–Ω—Ç –∫–æ—Ä–æ—Ç—à–∏–π —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π.

# ‚úÖ –í–∞—Ä—ñ–∞–Ω—Ç 3: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è filter()

def filter_even_numbers(lst):
    return list(filter(lambda num: num % 2 == 0, lst))

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞
print(filter_even_numbers([1, 2, 3, 4, 5, 6]))  # [2, 4, 6]
# –§—É–Ω–∫—Ü—ñ—è filter() –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ —Å–ø–∏—Å–∫—É —Ç–∞ –∑–∞–ª–∏—à–∞—î —Ç—ñ–ª—å–∫–∏ —Ç—ñ –µ–ª–µ–º–µ–Ω—Ç–∏, –¥–ª—è —è–∫–∏—Ö lambda num: num % 2 == 0 –ø–æ–≤–µ—Ä—Ç–∞—î True.

# üèÜ –©–æ –≤–∏–±—Ä–∞—Ç–∏?
# –¶–∏–∫–ª for ‚Äî –∑—Ä–æ–∑—É–º—ñ–ª–∏–π —Ç–∞ –≥–Ω—É—á–∫–∏–π, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É.
# –°–ø–∏—Å–∫–æ–≤–µ –≤–∫–ª—é—á–µ–Ω–Ω—è (list comprehension) ‚Äî –Ω–∞–π–æ–ø—Ç–∏–º–∞–ª—å–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–±.
# filter() ‚Äî –ø—Ä–∞—Ü—é—î —Ç—Ä–æ—Ö–∏ –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ, –∞–ª–µ –±—ñ–ª—å—à –¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω–∏–π —Å—Ç–∏–ª—å.
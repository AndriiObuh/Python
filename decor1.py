# –°—Ç–≤–æ—Ä–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –±—É–ª–∞ –≤–∏–∫–ª–∏–∫–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è.
# –û—Å—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, —è–∫–∏–π –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –Ω–∞–∑–≤—É —Ä–∞–∑–æ–º —ñ–∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤–∏–∫–ª–∏–∫—ñ–≤:

def call_counter(func):
    count = 0  # –õ—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–ª–∏–∫—ñ–≤
    
    def wrapper(*args, **kwargs):
        nonlocal count
        count += 1
        print(f"–§—É–Ω–∫—Ü—ñ—è {func.__name__} –≤–∏–∫–ª–∏–∫–∞–Ω–∞ {count} —Ä–∞–∑(–∏)")
        return func(*args, **kwargs)
    
    return wrapper

@call_counter
def say_hello():
    print("Hello, world!")

@call_counter
def add(a, b):
    return a + b

# –¢–µ—Å—Ç—É—î–º–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
say_hello()
say_hello()
print(add(2, 3))
print(add(10, 5))
# üìå –í–∏–≤—ñ–¥:
# –§—É–Ω–∫—Ü—ñ—è say_hello –≤–∏–∫–ª–∏–∫–∞–Ω–∞ 1 —Ä–∞–∑(–∏)
# Hello, world!
# –§—É–Ω–∫—Ü—ñ—è say_hello –≤–∏–∫–ª–∏–∫–∞–Ω–∞ 2 —Ä–∞–∑(–∏)
# Hello, world!
# –§—É–Ω–∫—Ü—ñ—è add –≤–∏–∫–ª–∏–∫–∞–Ω–∞ 1 —Ä–∞–∑(–∏)
# 5
# –§—É–Ω–∫—Ü—ñ—è add –≤–∏–∫–ª–∏–∫–∞–Ω–∞ 2 —Ä–∞–∑(–∏)
# 15
# üîç –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
# –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–º—ñ–Ω–Ω—É count, —è–∫–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–ª–∏–∫—ñ–≤ —Ñ—É–Ω–∫—Ü—ñ—ó.
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ nonlocal count, —â–æ–± –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—É count –≤ wrapper().
# –ü–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –≤–∏–∫–ª–∏–∫–æ–º —Ñ—É–Ω–∫—Ü—ñ—ó –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —ñ –≤–∏–≤–æ–¥–∏–º–æ –π–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è.
# –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é func(*args, **kwargs).
# ‚úÖ –¢–µ–ø–µ—Ä –∫–æ–∂–µ–Ω –≤–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –±—É–¥–µ –ø—ñ–¥—Ä–∞—Ö–æ–≤—É–≤–∞—Ç–∏—Å—å!